name: Release on tag

on:
    push:
        tags:
            - 'v*'   # v1.4.0, v1.4.1-alpha1, v1.5.0-beta1

permissions:
    contents: write

concurrency:
    group: release-${{ github.ref }}
    cancel-in-progress: false

jobs:
    gate:
        name: Classify tag (main vs dev + version scheme)
        runs-on: ubuntu-latest
        outputs:
            release_should_run: ${{ steps.decide.outputs.release_should_run }}
            prerelease: ${{ steps.decide.outputs.prerelease }}
            version: ${{ steps.version.outputs.version }}
        steps:
            - name: Checkout tag commit
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0

            - name: Derive version from tag
              id: version
              run: |
                  RAW="${GITHUB_REF_NAME}"
                  echo "version=${RAW#v}" >> "$GITHUB_OUTPUT"

            - name: Fetch main & dev
              run: |
                  git fetch origin main --depth=1 || true
                  git fetch origin dev --depth=1 || true

            - name: Decide release kind
              id: decide
              shell: bash
              run: |
                  set -euo pipefail
                  TAG="${GITHUB_REF_NAME}"

                  RE_STABLE='^v[0-9]+\.[0-9]+\.[0-9]+$'
                  RE_PRE='^v[0-9]+\.[0-9]+\.[0-9]+-(alpha|beta)[0-9]+$'

                  on_main="false"
                  on_dev="false"

                  if git rev-parse --verify --quiet origin/main >/dev/null; then
                    if git merge-base --is-ancestor "$GITHUB_SHA" origin/main; then on_main="true"; fi
                  fi
                  if git rev-parse --verify --quiet origin/dev >/dev/null; then
                    if git merge-base --is-ancestor "$GITHUB_SHA" origin/dev; then on_dev="true"; fi
                  fi

                  release_should_run="false"
                  prerelease="false"

                  if [[ "$on_main" == "true" && "$TAG" =~ $RE_STABLE ]]; then
                      release_should_run="true"
                      prerelease="false"
                      echo "Stable release (on main): $TAG"
                  elif [[ "$on_dev" == "true" && "$TAG" =~ $RE_PRE ]]; then
                      release_should_run="true"
                      prerelease="true"
                      echo "Prerelease (on dev): $TAG"
                  else
                      echo "No release: tag does not match branch/pattern rules."
                      echo "on_main=$on_main on_dev=$on_dev tag=$TAG"
                      echo "Expected: main + $RE_STABLE OR dev + $RE_PRE"
                  fi

                  echo "release_should_run=$release_should_run" >> "$GITHUB_OUTPUT"
                  echo "prerelease=$prerelease" >> "$GITHUB_OUTPUT"

    build:
        name: Build (Node only)
        needs: gate
        if: needs.gate.outputs.release_should_run == 'true'
        runs-on: ubuntu-latest

        steps:
            - name: Checkout
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0

            - name: Setup Node
              uses: actions/setup-node@v4
              with:
                  node-version: '20'
                  cache: 'npm'

            - name: Install dependencies
              env:
                  NODE_ENV: development
              run: |
                  if [ -f package-lock.json ]; then npm ci; else npm install; fi

            - name: Build assets
              env:
                  NODE_ENV: production
              run: npm run build

            - name: Create release zip
              run: |
                  set -euo pipefail
                  PLUGIN_SLUG="$(basename "$GITHUB_REPOSITORY")"
                  VERSION="${{ needs.gate.outputs.version }}"
                  ZIP="${PLUGIN_SLUG}-v${VERSION}.zip"

                  # Export clean tree (respects .gitattributes export-ignore)
                  git archive --format=tar --prefix="${PLUGIN_SLUG}/" HEAD | tar -x -C /tmp

                  # If build outputs to ignored dirs, copy them in:
                  for DIR in dist build assets; do
                      if [ -d "$DIR" ]; then
                          rsync -a "$DIR/" "/tmp/${PLUGIN_SLUG}/${DIR}/"
                      fi
                  done

                  cd /tmp
                  zip -rq "$ZIP" "${PLUGIN_SLUG}"
                  mkdir -p "$GITHUB_WORKSPACE/artifacts"
                  mv "$ZIP" "$GITHUB_WORKSPACE/artifacts/"

            - name: Upload artifact
              uses: actions/upload-artifact@v4
              with:
                  name: plugin-zip
                  path: artifacts/*.zip

    release:
        name: Publish GitHub Release
        needs: [gate, build]
        if: needs.gate.outputs.release_should_run == 'true'
        runs-on: ubuntu-latest

        steps:
            - name: Download artifact
              uses: actions/download-artifact@v4
              with:
                  name: plugin-zip
                  path: dist

            - name: Create Release
              uses: softprops/action-gh-release@v2
              with:
                  tag_name: ${{ github.ref_name }}
                  files: dist/*.zip
                  draft: false
                  prerelease: ${{ needs.gate.outputs.prerelease == 'true' }}
                  # Option A: let GitHub autogenerate notes from merged PRs/commits
                  generate_release_notes: true
                  # Option B (later): supply a custom body from CHANGELOG.md
                  # body_path: CHANGELOG.md
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
